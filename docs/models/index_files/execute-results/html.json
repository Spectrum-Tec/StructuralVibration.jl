{
  "hash": "f27284bbc1740e924be508864cd33979",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: Mechanical models\nformat:\n  html:\n    toc: true\n    number-sections: true\nengine: julia\nexecute:\n  freeze: auto\n  cache: true\n---\n\n\n\n\n\n\n## Continuous models\n\n### 1D models {#sec-1d-models}\n\n#### Bars, Rods and strings\n\nLongitudinal bars, torsional rods and strings are governed by the wave equation, which can be written under the following form:\n$$\nm \\ddot y(x, t) - D \\frac{\\partial^2 y(x,t)}{\\partial x^2} = p(x, t),\n$$\nwhere:\n\n- $y(x, t)$: Kinematic data at location $x$ and time $t$\n\n- $p(x, t)$: External excitation term\n\n- $m$: Linear inertia of the type\n\n- $D$: Stiffness of the type\n\n*For a longitudinal bar:*\n\n  - $y(x, t) = u(x, t)$\n      - $u(x, t)$: Longitudinal displacement [m]\n\n  - $p(x, t)$: Distributed longitudinal force [N/m]\n\n  - $m = \\rho S$: Linear mass density [kg/m^2^]\n      - $\\rho$: Mass density [kg/m^3^]\n      - $S$: Cross-section area [m^2^]\n\n  - $D = E S$: Longitudinal stiffness [N]\n      - $E$: Young's modulus [Pa]\n\n*For a torsional rod:*\n\n  - $y(x, t) = \\theta(x, t)$\n      - $\\theta$: Torsion angle [rad]\n\n  - $p(x, t)$: Distributed moment [N.m/m]\n\n  - $m = \\rho I_G$: Linear rotational inertia [kg.m^4^]\n    - $I_G$: Polar moment of area [m^4^]\n\n  - $D = G J_T$: Rotational stiffness [N.m^2^]\n    - $G$: Shear modulus [Pa]\n    - $J_T$: Torsion constant [m^4^]\n\n*For a string:*\n\n  - $y(x, y)$: Transverse displacement [m]\n\n  - $m$: Linear mass density [kg/m]\n\n  - $D$: Tension force [N]\n\n#### Euler-Bernoulli beams\n\nEuler-Bernoulli beams are governed by the following equation of motion:\n$$\nm\\ddot v(x, t) + D\\frac{\\partial^4 v(x, t)}{\\partial x^4} = p(x, t),\n$$\nwhere:\n\n- $v(x, t)$: Transverse displacement [m]\n\n- $p(x, t)$: External excitation term [N/m]\n\n- $m = \\rho S$: Linear mass density [kg/m]\n\n- $D = E I_z$: Bending stiffness [N.m^2^]\n  - $I_z$: Second moment of area [m^4^]\n\n#### API\n\n**Data types**\n\nAll the following data types are a subtype of the super type `OneDtype`.\n\n::: {.api}\n**Bar**\n\n\n\n---\n\n::: {#4 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>Bar&#40;L, S, E, ρ&#41;</code></pre>\n<p>Structure containing the data of a homogeneous and isotropic longitudinal bar</p>\n<p><strong>Constructor parameters</strong></p>\n<ul>\n<li><p><code>L</code>: Length &#91;m&#93;</p>\n</li>\n<li><p><code>S</code>: Cross-section area &#91;m²&#93;</p>\n</li>\n<li><p><code>E</code>: Young&#39;s modulus &#91;Pa&#93;</p>\n</li>\n<li><p><code>ρ</code>: Mass density &#91;kg/m³&#93;</p>\n</li>\n</ul>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>L</code>: Length &#91;m&#93;</p>\n</li>\n<li><p><code>m</code>: Line mass &#91;kg/m&#93;</p>\n</li>\n<li><p><code>D</code>: Stiffness coefficient &#91;Pa&#93;</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**Rod**\n\n---\n\n::: {#6 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>Rod&#40;L, I, J, G, ρ&#41;</code></pre>\n<p>Structure containing the data of a homogeneous and isotropic torsional bar</p>\n<p><strong>Constructor parameters</strong></p>\n<ul>\n<li><p>L: Length &#91;m&#93;</p>\n</li>\n<li><p>I: Second-moment of area &#91;m⁴&#93;</p>\n</li>\n<li><p>J: Torsion constant &#91;m⁴&#93;</p>\n</li>\n<li><p>G: Shear modulus &#91;Pa&#93;</p>\n</li>\n<li><p>ρ: Mass density &#91;kg/m³&#93;</p>\n</li>\n</ul>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>L</code>: Length &#91;m&#93;</p>\n</li>\n<li><p><code>m</code>: Line mass &#91;kg/m&#93;</p>\n</li>\n<li><p><code>D</code>: Stiffness coefficient &#91;Pa&#93;</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n::: {.api}\n**Strings**\n\n\n\n---\n\n::: {#8 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>Strings&#40;L, S, D, ρ&#41;</code></pre>\n<p>Structure containing the data of a homogeneous and isotropic string</p>\n<p><strong>Constructor parameters</strong></p>\n<ul>\n<li><p><code>L</code>: Length &#91;m&#93;</p>\n</li>\n<li><p><code>S</code>: Cross-section area &#91;m²&#93;</p>\n</li>\n<li><p><code>D</code>: Tension &#91;N&#93;</p>\n</li>\n<li><p><code>ρ</code>: Mass density &#91;kg/m³&#93;</p>\n</li>\n</ul>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>L</code>: Length &#91;m&#93;</p>\n</li>\n<li><p><code>m</code>: Linear mass density &#91;kg/m&#93;</p>\n</li>\n<li><p><code>D</code>: Tension &#91;N&#93;</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**Beam**\n\n---\n\n::: {#10 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>Beam&#40;L, S, I, E, ρ&#41;</code></pre>\n<p>Structure containing the data of a homogeneous and isotropic bending beam</p>\n<p><strong>Constructor parameters</strong></p>\n<ul>\n<li><p><code>L</code>: Length &#91;m&#93;</p>\n</li>\n<li><p><code>S</code>: Cross-section area &#91;m²&#93;</p>\n</li>\n<li><p><code>I</code>: Second moment of area &#91;m⁴&#93;</p>\n</li>\n<li><p><code>E</code>: Young&#39;s modulus &#91;Pa&#93;</p>\n</li>\n<li><p><code>ρ</code>: Density &#91;kg/m³&#93;</p>\n</li>\n</ul>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>L</code>: Length &#91;m&#93;</p>\n</li>\n<li><p><code>M</code>: Linear mass density &#91;kg/m&#93;</p>\n</li>\n<li><p><code>D</code>: Bending stiffness &#91;N.m²&#93;</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n**Related functions**\n\n::: {.api}\n**modefreq**\n\n\n\n---\n\n::: {#12 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>modefreq&#40;model::Bar, fmax, bc &#61; :CC&#41;\nmodefreq&#40;model::Rod, fmax, bc &#61; :CC&#41;\nmodefreq&#40;model::Strings, fmax, bc &#61; :CC&#41;\nmodefreq&#40;model::Beam, fmax, bc &#61; :SS&#41;</code></pre>\n<p>Computes the natural frequencies of a longitudinal or torsional bar up to fmax</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>model</code>: Structure containing the bar data</p>\n</li>\n<li><p><code>fmax</code>: Maximum frequency for calculating the mode shapes &#91;Hz&#93;</p>\n</li>\n<li><p><code>bc</code>: Boundary conditions</p>\n<ul>\n<li><p>For all OneDStructure</p>\n<ul>\n<li><p><code>:CC</code>: Clamped - Clamped</p>\n</li>\n<li><p><code>:CF</code>: Clamped - Free</p>\n</li>\n<li><p><code>:FF</code>: Free - Free</p>\n</li>\n</ul>\n</li>\n<li><p>For beams</p>\n<ul>\n<li><p><code>:SS</code>: Simply Supported - Simply Supported</p>\n</li>\n<li><p><code>:SC</code>: Simply Supported - Clamped</p>\n</li>\n<li><p><code>:SF</code>: Simply Supported - Free</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Outputs</strong></p>\n<ul>\n<li><p><code>ωn</code>: Natural frequencies calculated up to ωmax &#61; 2π*fmax &#91;Hz&#93;</p>\n</li>\n<li><p><code>kn</code>: Vector of modal wavenumbers</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**modeshape**\n\n---\n\n::: {#14 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>modeshape&#40;model::Bar, kn, x, bc &#61; :CC&#41;\nmodeshape&#40;model::Rod, kn, x, bc &#61; :CC&#41;\nmodeshape&#40;model::Strings, kn, x, bc &#61; :CC&#41;\nmodeshape&#40;model::Beam, kn, x, bc &#61; :SS&#41;</code></pre>\n<p>Computes the mass-normalized mode shapes of a longitudinal or torsional bar</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>model</code>: Structure containing the bar data</p>\n</li>\n<li><p><code>kn</code>: Array of modal wavenumbers</p>\n</li>\n<li><p><code>x</code>: Coordinates of calculation points of the mode shapes</p>\n</li>\n<li><p><code>bc</code>: Boundary conditions</p>\n<ul>\n<li><p>For all OneDStructure</p>\n<ul>\n<li><p><code>:CC</code>: Clamped - Clamped</p>\n</li>\n<li><p><code>:CF</code>: Clamped - Free</p>\n</li>\n<li><p><code>:FF</code>: Free - Free</p>\n</li>\n</ul>\n</li>\n<li><p>For beams</p>\n<ul>\n<li><p><code>:SS</code>: Simply Supported - Simply Supported</p>\n</li>\n<li><p><code>:SC</code>: Simply Supported - Clamped</p>\n</li>\n<li><p><code>:SF</code>: Simply Supported - Free</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>ϕ</code>: Mass-normalized mode shapes</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n#### Example\n\n```julia\n# Dimensions\nL = 1.\nd = 3e-2\n\n# Section features\nS = π*d^2/4\nIz = π*d^4/64\nIG = 2Iz\nJ = IG\n\n# Tension for string\nT = 100.\n\n# Material\nE = 2.1e11\nν = 0.33\nG = E/(1 - 2*ν)\nρ = 7800.\n\n# Computation parameters\nfmax = 2000.\nx = [0.1, 0.9]\n\n# Initialization of the data types\nbar = Bar(L, S, E, ρ)\nrod = Rod(L, IG, J, G, ρ)\nstrings = Strings(L, S, T, ρ)\nbeam = Beam(L, S, Iz, E, ρ)\n\n# Computation of the natural frequencies\nωn, kn = modefreq(bar, fmax)\n\n# Computation of the corresponding mode shapes\nϕn = modeshape(bar, kn, x, :CC)\n```\n\n### 2D models\n\n#### Rectangular membranes\n\nRectangular membranes are governed by the following equation of motion:\n$$\nm \\ddot w(x, y ,t) + D\\Delta w(x, y, t) = p(x, y, t),\n$$\nwhere:\n\n- $w(x, y, t)$: Transverse displacement [m] at point $(x, y)$ and time $t$\n\n- $m$: Surface mass [kg/m]\n\n- $D = \\tau$: Linear tension [N/m]\n\n- $\\Delta = \\frac{\\partial^2}{\\partial x^2} + \\frac{\\partial^2}{\\partial y^2}$: Laplacian operator\n\n#### Rectangular Kirchhoff-Love plates\n\nRectangular Kirchhoff-Love plates are governed by the following equation of motion:\n$$\nm \\ddot w(x, y, t) + D \\Delta^2 w(x, y, t) = p(x, y, t),\n$$\nwhere:\n\n- $w(x, y, t)$: Transverse displacement [m] at point $(x, y)$ and time $t$\n\n- $m = \\rho h$: Surface mass [kg/m^2^]\n    - $h$: Thickness [m]\n\n- $D = \\frac{Eh^3}{12(1 - \\nu^2)}$: Bending stiffness [N.m]\n    - $\\nu$: Poisson's coefficient\n\n- $\\Delta^2 = \\frac{\\partial^4}{\\partial x^4} + 2\\frac{\\partial^4}{\\partial x^2 \\partial y^2} + \\frac{\\partial^4}{\\partial y^4}$: Bilaplacian operator\n\n#### API\n\n**Data type**\n\nAll the following data types are a subtype of the super type `TwoDStructure`.\n\n::: {.api}\n**Membrane**\n\n\n\n---\n\n::: {#16 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>Membrane&#40;L, b, m, D&#41;</code></pre>\n<p>Structure containing the data of a homogeneous and isotropic rectangular membrane</p>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>L</code>: Length &#91;m&#93;</p>\n</li>\n<li><p><code>b</code>: Width &#91;m&#93;</p>\n</li>\n<li><p><code>m</code>: Surface mass &#91;kg/m²&#93;</p>\n</li>\n<li><p><code>D</code>: Tension per unit length &#91;N/m&#93;</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**Plate**\n\n---\n\n::: {#18 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>Plate&#40;L, b, h, E, ρ, ν&#41;</code></pre>\n<p>Structure containing the data of a homogeneous and isotropic bending plate</p>\n<p><strong>Constructor parameters</strong></p>\n<ul>\n<li><p><code>L</code>: Length &#91;m&#93;</p>\n</li>\n<li><p><code>b</code>: Width &#91;m&#93;</p>\n</li>\n<li><p><code>E</code>: Young&#39;s modulus &#91;Pa&#93;</p>\n</li>\n<li><p><code>ρ</code>: Density &#91;kg/m³&#93;</p>\n</li>\n<li><p><code>ν</code>: Poisson&#39;s ratio</p>\n</li>\n</ul>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>L</code>: Length &#91;m&#93;</p>\n</li>\n<li><p><code>b</code>: Width &#91;m&#93;</p>\n</li>\n<li><p><code>m</code>: Surface mass &#91;kg/m²&#93;</p>\n</li>\n<li><p><code>D</code>: Bending stiffness &#91;N.m&#93;</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n**Related functions**\n\n::: {.api}\n**modefreq**\n\n\n\n---\n\n::: {#20 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>modefreq&#40;model::Plate, fmax&#41;\nmodefreq&#40;model::Membrane, fmax&#41;</code></pre>\n<p>Computes the natural frequencies of a simply supported rectangular plate or a clamped rectangular membrane up to fmax</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>model</code>: Structure containing the data related to the plate</p>\n</li>\n<li><p><code>fmax</code>: Maximum frequency for calculating the modal shapes &#91;Hz&#93;</p>\n</li>\n</ul>\n<p><strong>Outputs</strong></p>\n<ul>\n<li><p><code>ωmn</code>: Natural frequencies calculated up to ωmax &#61; 2π*fmax &#91;Hz&#93;</p>\n</li>\n<li><p><code>kmn</code>: Matrix of modal wave numbers</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**modeshape**\n\n---\n\n::: {#22 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>modeshape&#40;model::Plate, kpq, x, y&#41;\nmodeshape&#40;model::Membrane, kpq, x, y&#41;</code></pre>\n<p>Computes the mass-normalized mode shapes of a simply supported rectangular plate or a clamped rectangular membrane</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>model</code>: Structure containing the data related to the structure</p>\n</li>\n<li><p><code>kmn</code>: Matrix of modal wave numbers</p>\n</li>\n<li><p><code>&#40;x, y&#41;</code>: Coordinates of the points where the mode shapes are calculated</p>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>ϕ</code>: Mass-normalized mode shapes</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n#### Example\n\n```julia\n# Dimensions\nLp = 0.6\nbp = 0.4\nhp = 1e-3\n\n# Material parameters\nE = 2.1e11\nρ = 7800.\nν = 0.33\n\n# Computation parameters\nfmax = 1000.\nxp = [0.1, 0.5]\nyp = [0.1, 0.3]\n\n# Initialization of the data types\nplate = Plate(Lp, bp, hp, E, ρ, ν)\n\n# Computation of the natural frequencies\nωn, kn = modefreq(plate, fmax)\n\n# Computation of the corresponding mode shapes\nϕn = modeshape(plate, kn, xp, yp)\n```\n\n## Discrete models\n\n### Sdof systems\n\nSingle degree of freedom (Sdof) systems are classically composed of a mass $m$, a stiffness $k$ and a viscous damper $c$ (see @fig-1dof).\n\n::: {#fig-1dof}\n![](../assets/images/1dof.svg)\n\nClassical representation of an Sdof system\n:::\n\nMathematically, their dynamic behavior is governed by the following normalized equation of motion :\n$$\n\\ddot x(t) + 2\\xi\\,\\omega_0\\, \\dot x(t) + \\omega_0^2 x(t) = \\frac{F(t)}{m}.\n$$\nwhere $F(t)$ can be either a base or an external excitation applied to the system.\n\nThe Sdof system can thus be defined by:\n\n- its mass $m$\n- its natural angular frequency $\\omega_0$ (or its natural frequency $f_0$)\n- its damping ratio $\\xi$\n\n#### API\n\n:::::: {.api}\n**Sdof**\n\n\n\n---\n\n::: {#24 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>Sdof&#40;m, ω0, ξ&#41;</code></pre>\n<p>Structure containing the data of a sdof system</p>\n<p><strong>Constructor</strong></p>\n<ul>\n<li><p><code>m</code>: Mass &#91;kg&#93;</p>\n</li>\n<li><p><code>f0</code>: Natural frequency &#91;Hz&#93;</p>\n</li>\n<li><p><code>ξ</code>: Damping ratio</p>\n</li>\n</ul>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>m</code>: Mass &#91;kg&#93;</p>\n</li>\n<li><p><code>ω0</code>: Natural frequency &#91;rad/s&#93;</p>\n</li>\n<li><p><code>ξ</code>: Damping ratio</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n#### Example\n\n```julia\n# Definition of the structural parameters\nm = 1.\nf₀ = 10.\nξ = 0.01\n\n# Initialization of Sdof\nsdof = Sdof(m, f₀, ξ)\n```\n\n### Mdof systems\n\n`StructuralVibration.jl` considers Multi-degrees of freedom (Mdof) systems, which topology is presented in @fig-mdof. This choice has been made, because it allows modeling a large variety of possible configurations.\n\n::: {#fig-mdof}\n![](../assets/images/mdof.svg)\n\nGeneral topology of an Mdof system\n:::\n\nThe dynamic behavior of such a system is governed by the following matrix system:\n$$\n\\mathbf{M} \\ddot{\\mathbf{x}}(t) + \\mathbf{K}\\mathbf{x}(t) = \\mathbf{f}(t),\n$$\nwhere:\n\n- $\\mathbf{M} = \\text{diag}(m_1, \\dots, m_j, \\dots, m_N)$ is the mass matrix.\n\n- $\\mathbf{K}$ is the stiffness matrix such that:\n$$\n\\mathbf{K} = \\begin{bmatrix}\nk_1 & -k_1 & 0 & \\ldots & 0 & 0 \\\\\n-k_1 & k_1 + k_2 & -k_2 & \\ddots & \\vdots & \\vdots \\\\\n0 & -k_2 & \\ddots & \\ddots & 0 & \\vdots \\\\\n\\vdots & 0 & \\ddots & \\ddots & -k_{N-1} & 0 \\\\\n\\vdots & \\vdots & \\ddots & -k_{N-1} & k_{N-1} + k_N & -k_N \\\\\n0 & 0 & \\ldots & 0 & -k_N & k_N\n\\end{bmatrix}.\n$$\n\n- $\\mathbf{x}(t) = \\left[x_1(t), \\dots, x_j(t), \\dots, x_N(t)\\right]^\\mathsf{T}$ is the displacement vector.\n\n- $\\mathbf{f}(t) = \\left[F_1(t), \\dots, F_j(t), \\dots, F_N(t)\\right]^\\mathsf{T}$ is the external force vector.\n\n#### API {#sec-api-mdof}\n\n**Data types**\n\n:::: {.api}\n**Mdof**\n\n---\n\n::: {#26 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>Mdof&#40;k, m, c &#61; Float64&#91;&#93;&#41;</code></pre>\n<p>Structure containing the data for building a mdof system</p>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>k</code>: Stiffness coefficients of the spring elements</p>\n</li>\n<li><p><code>m</code>: Masses of the mdof system</p>\n</li>\n<li><p><code>c</code>: Damping coefficients of the viscous dampers</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n\n::: {.callout-note title=\"About the damping matrix C\" collapse=\"true\"}\nIf viscous dampers are defined, the damping matrix $\\mathbf{C}$ is consistent with the stiffness matrix $\\mathbf{K}$, meaning that:\n$$\n\\mathbf{C} = \\begin{bmatrix}\nc_1 & -c_1 & 0 & \\ldots & 0 & 0 \\\\\n-c_1 & c_1 + c_2 & -c_2 & \\ddots & \\vdots & \\vdots \\\\\n0 & -k_2 & \\ddots & \\ddots & 0 & \\vdots \\\\\n\\vdots & 0 & \\ddots & \\ddots & -c_{N-1} & 0 \\\\\n\\vdots & \\vdots & \\ddots & -c_{N-1} & c_{N-1} + c_N & -c_N \\\\\n0 & 0 & \\ldots & 0 & -c_N & c_N\n\\end{bmatrix}.\n$$\n:::\n::::\n\n::: {.api}\n**MdofMesh**\n\n\n\n---\n\n::: {#28 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>MdofMesh&#40;Elt, constrained_dofs, free_dofs&#41;</code></pre>\n<p>Structure containing the data for building a mdof mesh</p>\n<p><strong>Constructor</strong></p>\n<ul>\n<li><p><code>model</code>: Mdof model</p>\n</li>\n<li><p><code>bc</code>: Boundary conditions</p>\n<ul>\n<li><p><code>:CC</code>: Clamped - Clamped</p>\n</li>\n<li><p><code>:CF</code>: Clamped - Free</p>\n</li>\n<li><p><code>:FF</code>: Free - Free</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>Elt</code>: Element connectivity matrix</p>\n</li>\n<li><p><code>constrained_dofs</code>: Constrained degrees of freedom</p>\n</li>\n<li><p><code>free_dofs</code>: Free degrees of freedom</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n**Related functions**\n\n::: {.api}\n**assembly**\n\n---\n\n::: {#30 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>assembly&#40;model::Mdof&#41;</code></pre>\n<p>Assembly of the mass, stiffness and damping matrices of a mdof system</p>\n<p><strong>Input</strong></p>\n<ul>\n<li><p><code>model</code>: Mdof model</p>\n</li>\n</ul>\n<p><strong>Outputs</strong></p>\n<ul>\n<li><p><code>K</code>: Stiffness matrix</p>\n</li>\n<li><p><code>M</code>: Mass matrix</p>\n</li>\n<li><p><code>C</code>: Damping matrix &#40;if viscous dampers are defined in <code>model</code>&#41;</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n::: {.api}\n**apply_bc**\n\n\n\n---\n\n::: {#32 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>apply_bc&#40;A, mesh&#41;</code></pre>\n<p>Apply boundary conditions to a given matrix</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>A</code>: Matrix to apply the boundary conditions</p>\n</li>\n<li><p><code>mesh</code>: Mesh of the system</p>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>A_bc</code>: Matrix with boundary conditions applied</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**eigenmode**\n\n---\n\n::: {#34 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>eigenmode&#40;K, M, n &#61; size&#40;K, 1&#41;&#41;</code></pre>\n<p>Computes the eigenmodes of a system defined by its mass and stiffness matrices.</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>K</code>: Stiffness matrix</p>\n</li>\n<li><p><code>M</code>: Mass matrix</p>\n</li>\n<li><p><code>n</code>: Number of modes to be keep in the modal basis</p>\n</li>\n</ul>\n<p><strong>Outputs</strong></p>\n<ul>\n<li><p><code>ω</code>: Vector of natural frequencies</p>\n</li>\n<li><p><code>Φ</code>: Mass-normalized mode shapes</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n::: {.api}\n**modal_matrices**\n\n\n\n---\n\n::: {#36 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>modal_matrices&#40;ωn, ξn&#41;</code></pre>\n<p>Computes the modal mass, stiffness, and damping matrices</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>ωn</code>: Vector of natural frequencies</p>\n</li>\n<li><p><code>ξn</code>: Modal damping</p>\n</li>\n</ul>\n<p><strong>Outputs</strong></p>\n<ul>\n<li><p><code>Kn</code>: Generalized stiffness matrix</p>\n</li>\n<li><p><code>Mn</code>: Generalized mass matrix &#40;identity matrix, due to mass normalization&#41;</p>\n</li>\n<li><p><code>Cn</code>: Generalized damping matrix</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**modal_effective_mass**\n\n---\n\n::: {#38 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>modal_effective_mass&#40;M, ϕn, r&#41;</code></pre>\n<p>Computes the effective mass of a mode</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>M</code>: Mass matrix</p>\n</li>\n<li><p><code>ϕn</code>: Mode shape</p>\n</li>\n<li><p><code>r</code>: Influence vector &#40;rigid body mode&#41;</p>\n</li>\n</ul>\n<p><strong>Outputs</strong></p>\n<ul>\n<li><p><code>meff</code>: Modal effective mass</p>\n</li>\n</ul>\n<p><em>Note: The modeshapes are supposed to be mass-normalized</em></p>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n#### Example\n\n```julia\n# Definition of the structural parameters\nk_mdof = [1., 1.]\nm_mdof = ones(3)\nc_mdof = [0.1, 0.1]\n\n# Initialization of Mdof\nmdof = Mdof(k_mdof, m_mdof, c_mdof)\n\n# Definition of a MdofMesh\nmdof_mesh = MdofMesh(mdof, bc = :CF)\n\n# System assembly\nK_mdof, M_mdof, C_mdof = assembly(mdof)\n\n# Apply boundary conditions (if any)\nK_bc = apply_bc(K_mdof, mdof_mesh)\nM_bc = apply_bc(M_mdof, mdof_mesh)\nC_bc = apply_bc(C_mdof, mdof_mesh)\n\n# Compute the eigenmodes of the systems\nωn, Φn = eigenmode(K_bc, M_bc)\n\n# Computation of the modal matrices\nKmodal, Mmodal, Cmodal = modal_matrices(ωn, 0.01)\n\n# Computation of modal effective mass\nmeff = modal_effective_mass(M_bc, Φn, ones(2))\n```\n\n### FE model\n\nFinite element models are available for the 1D continuous systems defined in @sec-1d-models.\n\n#### API\n**Data type**\n\n::: {.api}\n**OneDMesh**\n\n\n\n---\n\n::: {#40 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>OneDMesh&#40;model, xmin, Nelt, bc&#41;</code></pre>\n<p>Construct a mesh for a beam with Nelt elements, length L and starting at xmin.</p>\n<p><strong>Constructor parameters</strong></p>\n<ul>\n<li><p><code>model</code>: Structure containing the data related to the 1D system</p>\n</li>\n<li><p><code>xmin</code>: starting position of the beam</p>\n</li>\n<li><p><code>Nelt</code>: number of elements</p>\n</li>\n<li><p><code>bc</code>: Boundary conditions type</p>\n<ul>\n<li><p><code>:CC</code>: Clamped - Clamped</p>\n</li>\n<li><p><code>:FF</code>: Free - Free</p>\n</li>\n<li><p><code>:CF</code>: Clamped - Free</p>\n</li>\n<li><p><code>:SS</code>: Simply Supported - Simply Supported &#40;specific to beam&#41;</p>\n</li>\n<li><p><code>:CS</code>: Clamped - Simply Supported &#40;specific to beam&#41;</p>\n</li>\n<li><p><code>:SF</code>: Simply Supported - Free &#40;specific to beam&#41;</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>xmin</code>: Starting position of the beam</p>\n</li>\n<li><p><code>L</code>: Length of the beam</p>\n</li>\n<li><p><code>Nodes</code>: Nodes of the mesh</p>\n</li>\n<li><p><code>Elt</code>: Elements of the mesh</p>\n</li>\n<li><p><code>Ndof_per_node</code>&#96;: Number of degrees of freedom per node</p>\n</li>\n<li><p><code>elem_size</code>: Size of the elements</p>\n</li>\n<li><p><code>constrained_dofs</code>: Constrained degrees of freedom</p>\n</li>\n<li><p><code>free_dofs</code>: Free degrees of freedom</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n**Related functions**\n\n::: {.api}\n**assemby**\n\n---\n\n::: {#42 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>assembly&#40;model::OneDstructure, mesh::OneDMesh&#41;</code></pre>\n<p>Compute the global stiffness and mass matrices for a 1D structure with a given mesh.</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>model</code>: OneDStructure</p>\n<ul>\n<li><p><code>Beam</code>: Beam model</p>\n</li>\n<li><p><code>WaveEquation</code>: Bar, Rod or String model</p>\n</li>\n</ul>\n</li>\n<li><p><code>mesh</code>: OneDMesh</p>\n</li>\n</ul>\n<p><strong>Outputs</strong></p>\n<ul>\n<li><p><code>K</code>: global stiffness matrix</p>\n</li>\n<li><p><code>M</code>: global mass matrix</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n::: {.api}\n**rayleigh_damping_matrix**\n\n\n\n---\n\n::: {#44 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>rayleigh_damping_matrix&#40;K, M, α, β&#41;\nrayleigh_damping_matrix&#40;K, M, ω1, ω2, ξ1, ξ2&#41;</code></pre>\n<p>Compute the Rayleigh damping matrix for a given stiffness and mass matrices</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>K</code>: Stiffness matrix</p>\n</li>\n<li><p><code>M</code>: Mass matrix</p>\n</li>\n<li><p>Construction parameters</p>\n<ul>\n<li><p>Method 1</p>\n<ul>\n<li><p><code>α</code>: Mass proportional damping coefficient</p>\n</li>\n<li><p><code>β</code>: Stiffness proportional damping coefficient</p>\n</li>\n</ul>\n</li>\n<li><p>Method 2</p>\n<ul>\n<li><p><code>ω1</code>: First natural frequency</p>\n</li>\n<li><p><code>ω2</code>: Second natural frequency</p>\n</li>\n<li><p><code>ξ1</code>: Damping ratio for the first natural frequency</p>\n</li>\n<li><p><code>ξ2</code>: Damping ratio for the second natural frequency</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>C</code>: Rayleigh damping matrix</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**modal_damping_matrix**\n\n---\n\n::: {#46 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>modal_damping_matrix&#40;M, ωn, ξn, Φn&#41;</code></pre>\n<p>Compute the damping matrix C from modal parameters</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>M</code>: Mass matrix</p>\n</li>\n<li><p><code>ωn</code>: Natural angular frequencies</p>\n</li>\n<li><p><code>ξn</code>: Damping ratios</p>\n</li>\n<li><p><code>Φn</code>: Mass-normalized mode shapes</p>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>C</code>: Damping matrix</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n::: {.api}\n**Selection matrix**\n\n\n\n---\n\n::: {#48 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>selection_matrix&#40;mesh, selected_dofs&#41;</code></pre>\n<p>Compute the selection matrix for the selected dofs.</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>mesh</code>: OneDmesh</p>\n</li>\n<li><p><code>selected_dofs</code>: Selected dofs</p>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>S</code>: Selection matrix</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**apply_bc** - See @sec-api-mdof.\n:::\n\n::: {.api}\n**eigenmode** - See @sec-api-mdof.\n:::\n\n::: {.api}\n**modal_matrices** - See @sec-api-mdof.\n:::\n\n::: {.api}\n**modal_effective_mass** - See @sec-api-mdof.\n:::\n\n#### Example\n\n```julia\n# Dimensions\nL = 1.\nd = 3e-2\n\n# Section features\nS = π*d^2/4\nIz = π*d^4/64\n\n# Material\nE = 2.1e11\nρ = 7800.\n\n# Computation parameters\nfmax = 2000.\n\n# Initialization of the data types\nbeam = Beam(L, S, Iz, E, ρ)\n\n# Mesh definition\noned_mesh = OneDMesh(beam, 0., 20, :SS)\n\n# Construction of K and M\nKfe, Mfe = assembly(beam, oned_mesh)\n\n# Application of the BCs\nKbc = apply_bc(Kfe, oned_mesh)\nMbc = apply_bc(Mfe, oned_mesh)\n\n# Computation ofthe eigenmodes of the structure\nωfe, Φfe = eigenmode(Kbc, Mbc)\n\n# Calculation of the damping matrix\nCray = rayleigh_damping_matrix(Kbc, Mbc, 1., 1.)\nCmodal = modal_damping_matrix(Mbc, ωfe, 0.01, Φfe)\n```\n\n## State space representation\n\nThe state space representation of a mechanical system is expressed as:\n$$\n\\dot{\\mathbf{z}}(t) = \\mathbf{A}_c \\mathbf{z}(t) + \\mathbf{B}_c \\mathbf{u}(t),\n$$\nwhere:\n\n- $\\mathbf{z}(t)$: State vector\n\n- $\\mathbf{u}(t)$: Input vector\n\n- $\\mathbf{A}_c$: System matrix\n\n- $\\mathbf{B}_c$: Input matrix\n\n### Continuous-time models\n\nFor a mechanical system, whose equation of motion is:\n$$\n\\mathbf{M}\\ddot{\\mathbf{x}}(t) + \\mathbf{C}\\dot{\\mathbf{x}}(t) + \\mathbf{K x}(t) = \\mathbf{u}(t),\n$$\nthe corresponding continuous-time state equation is given by:\n$$\n\\begin{bmatrix}\n\\dot{\\mathbf{x}}(t) \\\\\n\\ddot{\\mathbf{x}}(t)\n\\end{bmatrix} = \\begin{bmatrix}\n\\mathbf{0} & \\mathbf{I} \\\\\n-\\mathbf{M}^{-1}\\mathbf{K} & -\\mathbf{M}^{-1}\\mathbf{C}\n\\end{bmatrix}\\begin{bmatrix}\n\\mathbf{x}(t) \\\\\n\\dot{\\mathbf{x}}(t)\n\\end{bmatrix}+ \\begin{bmatrix}\n\\mathbf{0} \\\\\n\\mathbf{M}^{-1}\n\\end{bmatrix}\\mathbf{u}(t).\n$$\n\nWhen using a modal expansion such that\n$$\n\\mathbf{x}(t) = \\mathbf{\\Phi}\\mathbf{q}(t),\n$$\nwhere $\\mathbf{\\Phi}$ is the mode shapes matrix and $\\mathbf{q}(t)$ is the modal coordinate vector, a modal state space equation can be obtained. The latter is written:\n$$\n\\begin{bmatrix}\n\\dot{\\mathbf{q}}(t) \\\\\n\\ddot{\\mathbf{q}}(t)\n\\end{bmatrix} = \\begin{bmatrix}\n\\mathbf{0} & \\mathbf{I} \\\\\n-\\mathbf{\\Omega}^2 & -\\mathbf{\\Xi}\n\\end{bmatrix}\\begin{bmatrix}\n\\mathbf{q}(t) \\\\\n\\dot{\\mathbf{q}}(t)\n\\end{bmatrix}+ \\begin{bmatrix}\n\\mathbf{0} \\\\\n\\mathbf{\\Phi}^\\mathsf{T}\n\\end{bmatrix}\\mathbf{u}(t),\n$$\nwhere $\\mathbf{\\Omega}^2 = \\text{diag}(\\omega_1^2, \\dots, \\omega_N^2)$ and $\\mathbf{\\Xi} = \\text{diag}(2\\xi_1\\omega_1, \\dots, 2\\xi_N\\omega_N)$.\n\n#### API\n\n**Data type**\n\n::: {.api}\n**ContinuousStateSpace**\n\n---\n\n::: {#50 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>ContinuousStateSpace&#40;Ac, Bc&#41;</code></pre>\n<p>Continuous-time state-space model</p>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>Ac</code>: Continuous-time state matrix A</p>\n</li>\n<li><p><code>Bc</code>: Continuous-time input matrix B</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n**Related functions**\n\n::: {.api}\n**ss_model**\n\n\n\n---\n\n::: {#52 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>ss_model&#40;K, M, C&#41;</code></pre>\n<p>Generates a continuous-time state-space model from the mass, damping, and stiffness matrices</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>K</code>: Stiffness matrix</p>\n</li>\n<li><p><code>M</code>: Mass matrix</p>\n</li>\n<li><p><code>C</code>: Damping matrix</p>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>css</code>: ContinuousStateSpace</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**ss_modal_model**\n\n---\n\n::: {#54 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>ss_modal_model&#40;ωn, ξn, ϕn&#41;</code></pre>\n<p>Generates a continuous-time state-space model from the mass, damping, and stiffness matrices</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>ωn</code>: Natural angular frequencies</p>\n</li>\n<li><p><code>ξn</code>: Damping ratios</p>\n</li>\n<li><p><code>ϕn</code>: Mass-normalized mode shapes</p>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>css</code>: ContinuousStateSpace</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n::: {.api}\n**eigenmode**\n\n\n\n---\n\n::: {#56 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>eigenmode&#40;K, M, n &#61; size&#40;K, 1&#41;&#41;</code></pre>\n<p>Computes the eigenmodes of a system defined by its mass and stiffness matrices.</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>K</code>: Stiffness matrix</p>\n</li>\n<li><p><code>M</code>: Mass matrix</p>\n</li>\n<li><p><code>n</code>: Number of modes to be keep in the modal basis</p>\n</li>\n</ul>\n<p><strong>Outputs</strong></p>\n<ul>\n<li><p><code>ω</code>: Vector of natural frequencies</p>\n</li>\n<li><p><code>Φ</code>: Mass-normalized mode shapes</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.api}\n**modal_parameters**\n\n---\n\n::: {#58 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>modal_parameters&#40;λ&#41;</code></pre>\n<p>Computes the natural angular frequencies and damping ratios from the complex eigenvalues</p>\n<p><strong>Input</strong></p>\n<ul>\n<li><p><code>λ</code>: Complex eigenvalues</p>\n</li>\n</ul>\n<p><strong>Outputs</strong></p>\n<ul>\n<li><p><code>ωn</code>: Natural angular frequencies</p>\n</li>\n<li><p><code>ξn</code>: Damping ratios</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n::: {.api}\n**c2r_modeshape**\n\n\n\n---\n\n::: {#60 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>c2r_modeshape&#40;Ψ&#41;</code></pre>\n<p>Converts the complex modes to real modes</p>\n<p><strong>Input</strong></p>\n<ul>\n<li><p><code>Ψ</code>: Complex modes</p>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>ϕn</code>: Real modes</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n#### Example\n\n```julia\n# System matrices\nm_ss = Diagonal([2., 1.])\nk_ss = [6. -2.; -2. 4.]\nc_ss = [0.67 -0.11; -0.11 0.39]\n\n# Continuous-time state space from system matrices\ncss = ss_model(k_ss, m_ss, c_ss)\nλ, Ψ = eigenmode(css.Ac)\nω, ξ = modal_parameters(λss)\nΨr = c2r_modeshape(Ψ)\n\n# Continuous-time state space from modal information\nωn, ϕn = eigenmode(k_ss, m_ss)\ncss_modal = ss_modal_model(ωn, 0.01, ϕn)\n```\n\n### Discrete-time models\n\nDiscrete-time models can be either be obtained using sampled strategies from direct-time integration methods (e.g. Newmark's scheme). However, both approaches lead to a discrete-time state equation of the form:\n$$\n\t\\mathbf{z}_{k+1} = \\mathbf{A}\\, \\mathbf{z}_k + \\mathbf{B}_f\\, \\mathbf{u}_k + \\mathbf{B}_g\\, \\mathbf{u}_{k+1},\n$$\n\nThe previous formulation is rather non-standard, since the state vector at frequency step $k + 1$ requires the knowledge of the input vector at time steps $k$ and $k + 1$. To reduce the state-space representation to its standard form, a reduced state $\\mathbf{\\overline{z}}_{k+1}$ is introduced:\n$$\n\t\\mathbf{z}_{k+1} = \\mathbf{A}\\, \\mathbf{x}_k + \\mathbf{B}_f\\, \\mathbf{u}_k,\n$$\n\nIn doing so, the discretized state equation becomes:\n$$\n\t\\mathbf{\\overline{z}}_{k+1} = \\mathbf{A}\\, \\mathbf{\\overline{z}}_k + \\mathbf{B}\\, \\mathbf{u}_k\n$$\nwhere $\\mathbf{B} = \\mathbf{B}_f + \\mathbf{A\\, B}_g$.\n\n#### Sampling methods\n\nSampling methods are based on the discretization of the solution of the continuous-time state equation. Once discretized, the state equation can be written as:\n$$\n\\mathbf{z}_{k+1} = \\mathbf{A} \\, \\mathbf{z}_k + \\mathbf{A}\\, \\int_{0}^{h} e^{-\\mathbf{A_c}\\tau}\\, \\mathbf{B_c}\\,\\mathbf{u}(\\tau + kh)\\, d\\tau,\n$$\nwhere $\\mathbf{A} = e^{\\mathbf{A_c} h}$ is the the discretized system matrix and $h$ is the discretization timestep.\n\nTo cover a wide range of situations, the input vector is assumed to be parameterized as follows:\n$$\n\\mathbf{u}(\\tau + kh) = f(\\tau)\\, \\mathbf{u}_k + g(\\tau)\\, \\mathbf{u}_{k+1},\n$$\nwhere the basis function $f(\\tau)$ and $g(\\tau)$ control the evolution of the input vector between two time steps.\n\nIntroducing the parameterization of the input vector into the convolution integral, one obtains the following state equation:\n$$\n\t\\mathbf{z}_{k+1} = \\mathbf{A}\\, \\mathbf{z}_k + \\mathbf{B}_f\\, \\mathbf{u}_k + \\mathbf{B}_g\\, \\mathbf{u}_{k+1},\n$$\nwhere $\\mathbf{B}_f$ and $\\mathbf{B}_g$ are the discretized input matrices defined such that:\n$$\n\t\\mathbf{B}_f = \\mathbf{A}\\, \\int_{0}^{h} e^{-\\mathbf{A_c}\\tau}\\, \\mathbf{B_c}\\,f(\\tau)\\, d\\tau \\; \\text{ and } \\; \\mathbf{B}_g = \\mathbf{A}\\, \\int_{0}^{h} e^{-\\mathbf{A_c}\\tau}\\, \\mathbf{B_c}\\,g(\\tau)\\, d\\tau.\n$$\n\nIn the literature, the most commonly used sampling methods are the following[^1]:\n\n[^1]: D. Bernal. \"Optimal discrete to continuous transfer for band limited inputs\", *Journal of Engineering Mechanics*, vol. 133 (12), pp. 1370-1377, 2007.\n\n-  The Zero-Order Hold (ZOH) strategy, which assumes that the input vector is constant between two samples. This assumption is satisfied for $f(\\tau) = 1$ and $g(\\tau) = 0$ and leads to:\n$$\n\t\t\\mathbf{B} = \\mathbf{B}_f = (\\mathbf{A} - \\mathbf{I})\\, \\mathbf{A}_\\mathbf{c}^{-1}\\, \\mathbf{B_c}.\n$$\n\n- The First-Order Hold (FOH) sampling method, which assumes that the input vector varies linearly between two samples. This assumption is satisfied for $f(\\tau) = 1 - \\tau/h$ and $g(\\tau) = \\tau/h$ and leads to:\n$$\n\t\t\\begin{split}\n\t\t\t&\\mathbf{B}_f + \\mathbf{B}_g = (\\mathbf{A} - \\mathbf{I})\\, \\mathbf{A}_\\mathbf{c}^{-1}\\, \\mathbf{B_c}, \\\\\n\t\t\t&\\mathbf{B}_g = (\\mathbf{A} - \\mathbf{A_c}h - \\mathbf{I})\\mathbf{A}_\\mathbf{c}^{-2}\\, \\mathbf{B_c}/h.\n\t\t\\end{split}\n$$\n\n- The Band-Limited Hold (BLH) sampling method, which assumes that the input signal can be approximated as a band-limited signal (i.e. the energy of the signal is concentrated in a defined frequency range). This assumption is satisfied for $f(\\tau) = h\\, \\delta(\\tau)$ and $g(\\tau) = 0$, where $\\delta(\\tau)$ is the Dirac delta function and leads to:\n$$\n\t\t\\mathbf{B} = \\mathbf{B}_f = \\mathbf{A}\\, \\mathbf{B_c}\\, h.\n$$\n\n#### Direct-time integration based methods\n\nDespite several methods can be found in the literature, such as the Newmark's family schemes, this package only provides the Runge-Kutta approach, because it is an explicit method (i.e. does not require any matrix inversion). After some calculation not detailed here[^2], the discrete system and input matrices are expressed as:\n$$\n\t\\begin{split}\n\t&\\mathbf{A} = \\frac{1}{24}\\left[24\\,(\\mathbf{I} + \\mathbf{A_c}\\, h) + 12\\, \\mathbf{A}_\\mathbf{c}^2\\, h^2 + 4\\, \\mathbf{A}_\\mathbf{c}^3\\, h^3 + \\mathbf{A}_\\mathbf{c}^4\\, h^4\\right], \\\\\n\t&\\mathbf{B}_f = \\frac{h}{24}\\left[12\\, \\mathbf{I} + 8\\, \\mathbf{A_c}\\, h + 3 \\mathbf{A}_\\mathbf{c}^2\\, h^2 + \\mathbf{A}_\\mathbf{c}^3\\, h^3\\right]\\mathbf{B_c}, \\\\\n\t&\\mathbf{B}_g = \\frac{h}{24}\\left[12\\, \\mathbf{I} + 4\\, \\mathbf{A_c}\\, h + \\mathbf{A}_\\mathbf{c}^2\\, h^2\\right]\\mathbf{B_c}.\n\t\\end{split}\n$$\n\n[^2]: For further details, see: J. Ghibaudo. \"Inverse estimation of sparse mechanical excitation sources by Bayesian filtering\", *PhD thesis*, Conservatoire national des arts et métiers, 2024.\n\n#### API\n\n**Data type**\n\n::: {.api}\n**DiscreteStateSpace**\n\n---\n\n::: {#62 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>DiscreteStateSpace&#40;Ad, Bd, Bdp&#41;</code></pre>\n<p>Discrete-time state-space model</p>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>Ad</code>: Discrete-time state matrix A</p>\n</li>\n<li><p><code>Bd</code>: Discrete-time input matrix B</p>\n</li>\n<li><p><code>Bdp</code>: Discrete-time input matrix Bp &#40;only for <code>:foh</code> method&#41;</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n**Related function**\n\n::: {.api}\n**c2d**\n\n\n\n---\n\n::: {#64 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>c2d&#40;css::ContinuouStateSpace, h::Float64, method::Symbol&#41;</code></pre>\n<p>Converts a continuous-time state-space model to a discrete-time state-space model.</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>css</code>: Continuous-time state-space model</p>\n</li>\n<li><p><code>h</code>: Sampling time.</p>\n</li>\n<li><p><code>method</code>: Discretization method</p>\n<ul>\n<li><p><code>:zoh</code>: Zero-order Hold method</p>\n</li>\n<li><p><code>:foh</code>: First-order Hold method</p>\n</li>\n<li><p><code>:blh</code>: Band-limited Hold method</p>\n</li>\n<li><p><code>:rk4</code>: 4th order Runge-Kutta method</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>DiscreteStateSpace</code>: Discrete-time state-space model</p>\n<ul>\n<li><p><code>Ad</code>: Discrete-time state-space matrix A</p>\n</li>\n<li><p><code>Bd</code>: Discrete-time state-space matrix B</p>\n</li>\n<li><p><code>Bdp</code>: Discrete-time state-space matrix Bp &#40;only for <code>:foh</code> and <code>:rk4</code> methods&#41;</p>\n</li>\n</ul>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n#### Example\n\n```julia\ndss = c2d(css, 0.01, :zoh)\n```\n\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}