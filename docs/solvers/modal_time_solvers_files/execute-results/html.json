{
  "hash": "5ce95163aa022224367c3bf4a54d62e9",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: Modal time solvers\nformat:\n  html:\n    toc: true\n    number-sections: true\nengine: julia\nexecute:\n  freeze: auto\n  cache: true\n---\n\n\n\n\n\n\nThe aim of this section is to describe the modal time solvers available for solving Multi-degrees of freedom (Mdof) systems. To explain, the theoretical foundations of the proposed solvers, let's consider a Mdof system with $N$ degrees of freedom. The equation of motion of the system is given by:\n$$\n\\mathbf{M} \\ddot{\\mathbf{x}}(t) + \\mathbf{C} \\dot{\\mathbf{x}}(t) + \\mathbf{K} \\mathbf{x}(t) = \\mathbf{F}(t)\n$$\nwhere $\\mathbf{M}$ is the mass matrix, $\\mathbf{C}$ is the damping matrix, $\\mathbf{K}$ is the stiffness matrix, $\\mathbf{x}(t)$ is the displacement vector, and $\\mathbf{F}(t)$ is the vector of external forces.\n\nTo solve the previous in the modal space, the solution $\\mathbf{x}(t)$ is expressed as:\n$$\n\\mathbf{x}(t) = \\mathbf{\\Phi} \\mathbf{q}(t)\n$$\nwhere $\\mathbf{\\Phi}$ is the matrix of the mode shapes and $\\mathbf{q}(t)$ is the vector of modal coordinates.\n\nSubstituting the previous expression in the equation of motion, premultiplying by $\\mathbf{\\Phi}^\\mathsf{T}$, and using the orthogonality property of the mode shapes, one obtains a set of $N$ independent modal equations of motion given by:\n$$\n\\ddot{q}_n(t) + 2 \\xi_n \\omega_n \\dot{q}_n(t) + \\omega_n^2 q_n(t) = \\frac{f_n(t)}{m_n}\n$$\nwhere for the n-th mode,  $q_n(t)$ is the generalized coordinate, $\\xi_n$ is the damping ratio, $\\omega_n$ is the natural angular frequency, $f_n(t)$ is the modal force, and $m_n$ is the modal mass.\n\nIt should be noticed that a modal equation of motion corresponds to the equation of motion of a Sdof system with mass $m_n$, damping ratio $\\xi_n$, natural angular frequency $\\omega_n$.\n\nIt results that computing the response of an Mdof system in the modal space is equivalent to solving $N$ independent Sdof systems.\n\n:::{.callout-note}\nIn the following, only modal damping is considered. This means that:\n$$\n\\mathbf{C}_n = \\mathbf{\\Phi}^\\mathsf{T} \\mathbf{C} \\mathbf{\\Phi} = \\text{diag}(2\\xi_1 \\omega_1, 2\\xi_2 \\omega_2, \\ldots, 2\\xi_N \\omega_N).\n$$\n:::\n\n## Free response\n\nThe free response of an MDOF system is the response of the system when there are no external forces acting on it. In this case, the modal equations of motion of the system is given by:\n$$\n\\ddot{q}_n(t) + 2 \\xi_n \\omega_n \\dot{q}_n(t) + \\omega_n^2 q_n(t) = 0\n$$\n\nThe solution of the previous equation can be found in [Sdof solvers - Section 1.1](https://maucejo.github.io/StructuralVibration.jl/solvers/#free-response).\n\n### API\n\n**Data type**\n\n:::: {.api}\n**FreeModalTimeProblem**\n\n\n\n---\n\n::: {#4 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>FreeModalTimeProblem&#40;K, M, ξn, n &#61; size&#40;K, 1&#41;; ismodal &#61; false&#41;</code></pre>\n<p>Structure containing data for the modal time solver</p>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>K::VecOrMat&#123;Real&#125;</code>:</p>\n<ul>\n<li><p>If <code>ismodal &#61; false</code> then <code>Matrix&#123;Real&#125;</code>: Stiffness matrix</p>\n</li>\n<li><p>If <code>ismodal &#61; true</code> then <code>Vector&#123;Real&#125;</code>: Natural angular frequencies</p>\n</li>\n</ul>\n</li>\n<li><p><code>M::AbtractMatrix</code>:</p>\n<ul>\n<li><p>If <code>ismodal &#61; false</code>: Mass matrix</p>\n</li>\n<li><p>If <code>ismodal &#61; true</code>: Mass-normalized mode shapes</p>\n</li>\n</ul>\n</li>\n<li><p><code>ξn</code>: Damping ratios</p>\n</li>\n<li><p><code>u0::Tuple</code>: Initial conditions</p>\n<ul>\n<li><p><code>u0&#91;1&#93;</code>: Initial displacement &#40;or modal displacement&#41;</p>\n</li>\n<li><p><code>u0&#91;2&#93;</code>: Initial velocity &#40;or modal velocity&#41;</p>\n</li>\n</ul>\n</li>\n<li><p><code>t::AbstractRange</code>: Time points at which to evaluate the response</p>\n</li>\n<li><p><code>F::Matrix&#123;Real&#125;</code>: External force matrix &#40;or modal force matrix&#41;</p>\n</li>\n<li><p><code>n::Int</code>: Number of modes to retain in the modal basis</p>\n</li>\n<li><p><code>ismodal::Bool</code>: Flag to indicate if the problem contains modal data</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n:::{.callout-note}\nTwo possibilities are offered to the user to enter the structural properties of the system.\n\n1. Provide the stiffness and mass matrices.\n2. Provide the squared natural frequencies and (mass-normalized) mode shapes. This allows to use the modal information computed analytically for continuous systems or numerically for discrete systems.\n\nIn the latter case, the initial conditions must be expressed in the modal space.\n:::\n::::\n\n**Related function**\n\n::: {.api}\n**solve**\n\n---\n\n::: {#6 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>solve&#40;prob::FreeModalTimeProblem&#41;</code></pre>\n<p>Compute the free response of a multi-degrees of freedom &#40;Mdof&#41; system using the modal approach.</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>prob</code>: Structure containing the parameters of the Mdof problem</p>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>sol</code>: ModalTimeSolution structure containing the response of the system at the given time points</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n### Example\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\n# System parameters\nM = Diagonal([2., 1.])\nK = [6. -2.; -2. 4.]\nξ = 0.05\n\n# Time vector\nt = 0.:1e-2:30.\n\n# Initial conditions\nx0 = [0.2, 0.1]\nv0 = zeros(2)\n\n# Problem definition - case 1 - Provide the stiffness and mass matrices\nu0 = (x0, v0)\nprob = FreeModalTimeProblem(K, M, ξ, u0, t)\n\n# Problem definition - case 2 - Provide the squared natural frequencies and mode shapes\nωm, Φm = eigenmode(K, M)\nx0m = Φm'*M*x0\nv0m = Φm'*M*v0\nu0m = (x0m, v0m)\nprob_modal = FreeModalTimeProblem(ωm, Φm, ξ, u0m, t, ismodal = true)\n\n# Solution\nx_free = solve(prob).u\nx_free_modal = solve(prob_modal).u\n```\n:::\n\n\n\n::: {#10 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![](modal_time_solvers_files/figure-html/cell-6-output-1.svg){}\n:::\n:::\n\n\n\n\n\n## Forced response\n\nThe forced response of an Mdof system is the response of the system when external forces are acting on it. In this case, the modal equations of motion of the system is given by:\n$$\n\\ddot{q}_n(t) + 2 \\xi_n \\omega_n \\dot{q}_n(t) + \\omega_n^2 q_n(t) = \\frac{f_n(t)}{m_n}\n$$\n\nThe solution of the previous equation can be found in [Sdof solvers - Section 1.2](https://maucejo.github.io/StructuralVibration.jl/solvers/#forced-response).\n\n### Harmonic excitation\n\n#### API\n\n**Data type**\n\n::: {.api}\n**HarmonicModalTimeProblem**\n\n---\n\n\n\n::: {#12 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>HarmonicModalTimeProblem&#40;K, M, ξn, u0, t, F, ω &#61; 0., n &#61; size&#40;K, 1&#41;; ismodal &#61; false&#41;</code></pre>\n<p>Structure containing data for the modal time solver for computing the forced response due to an harmonic excitation</p>\n<p><strong>Constructor</strong></p>\n<ul>\n<li><p><code>K::VecOrMat&#123;Real&#125;</code>:</p>\n<ul>\n<li><p>If <code>ismodal &#61; false</code> then <code>Matrix&#123;Real&#125;</code>: Stiffness matrix</p>\n</li>\n<li><p>If <code>ismodal &#61; true</code> then <code>Vector&#123;Real&#125;</code>: Natural angular frequencies</p>\n</li>\n</ul>\n</li>\n<li><p><code>M::AbtractMatrix</code>:</p>\n<ul>\n<li><p>If <code>ismodal &#61; false</code>: Mass matrix</p>\n</li>\n<li><p>If <code>ismodal &#61; true</code>: Mass-normalized mode shapes</p>\n</li>\n</ul>\n</li>\n<li><p><code>ξn</code>: Damping ratios</p>\n</li>\n<li><p><code>u0::Tuple</code>: Initial conditions</p>\n<ul>\n<li><p><code>u0&#91;1&#93;</code>: Initial displacement &#40;or modal displacement&#41;</p>\n</li>\n<li><p><code>u0&#91;2&#93;</code>: Initial velocity &#40;or modal velocity&#41;</p>\n</li>\n</ul>\n</li>\n<li><p><code>t::AbstractRange</code>: Time points at which to evaluate the response</p>\n</li>\n<li><p><code>F::Real</code>: External force matrix &#40;or modal participation factors&#41;</p>\n</li>\n<li><p><code>freq::Real</code>: Excitation frequency</p>\n</li>\n<li><p><code>n::Int</code>: Number of modes to retain in the modal basis</p>\n</li>\n<li><p><code>ismodal::Bool</code>: Flag to indicate if the problem contains modal data</p>\n</li>\n</ul>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>K</code>: Stiffness matrix &#40;or modal stiffness matrix&#41;</p>\n</li>\n<li><p><code>M</code>: Mass matrix &#40;or mass-normalized mode shapes&#41;</p>\n</li>\n<li><p><code>ξn</code>: Damping ratios</p>\n</li>\n<li><p><code>u0</code>: Initial conditions</p>\n<ul>\n<li><p><code>u0&#91;1&#93;</code>: Initial displacement &#40;or modal displacement&#41;</p>\n</li>\n<li><p><code>u0&#91;2&#93;</code>: Initial velocity &#40;or modal velocity&#41;</p>\n</li>\n</ul>\n</li>\n<li><p><code>t</code>: Time points at which to evaluate the response</p>\n</li>\n<li><p><code>F</code>: Amplitude vector &#40;or modal participation vector&#41;</p>\n</li>\n<li><p><code>ω</code>: Excitation angular frequency</p>\n</li>\n<li><p><code>n</code>: Number of modes to retain in the modal basis</p>\n</li>\n<li><p><code>ismodal</code>: Flag to indicate if the problem contains modal data</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n**Related function**\n\n::: {.api}\n**solve**\n\n\n\n---\n\n::: {#14 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>solve&#40;prob::HarmonicModalTimeProblem&#41;</code></pre>\n<p>Compute the forced response of a multi-degrees of freedom &#40;Mdof&#41; system due to an harmonic excitation using the modal approach.</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>prob</code>: Structure containing the parameters of the Mdof problem</p>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>sol</code>: Solution structure containing the response of the system at the given time points</p>\n<ul>\n<li><p><code>u</code>: Displacement</p>\n</li>\n<li><p><code>du</code>: Velocity</p>\n</li>\n<li><p><code>ddu</code>: Acceleration</p>\n</li>\n</ul>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n#### Example\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\n# System parameters\nM = Diagonal([2., 1.])\nK = [6. -2.; -2. 4.]\nξ = 0.05\n\n# Time vector\nt = 0.:1e-2:30.\n\n# Initial conditions\nx0 = [0., 1e-4]\nv0 = zeros(2)\nu0 = (x0, v0)\n\n# Excitation parameters\nF = [1., 2.]\nfreq = 0.5\n\n# Problem definition - case 1 - Provide the stiffness and mass matrices\nprob_harmo = HarmonicModalTimeProblem(K, M, ξ, F, 2π*freq, u0, t)\n\n# Problem definition - case 2 - Provide the squared natural frequencies and mode shapes\nωm, Φm = eigenmode(K, M)\nx0m = Φm'*M*x0\nv0m = Φm'*M*v0\nu0m = (x0m, v0m)\nLm = Φm'*F\nprob_harmo_modal = HarmonicModalTimeProblem(ωm, Φm, ξ, Lm, 2π*freq, u0m, t, ismodal = true)\n\n# Solution\nx_harmo = solve(prob_harmo).u\nx_harmo_modal = solve(prob_harmo_modal).u\n```\n:::\n\n\n\n::: {#18 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![](modal_time_solvers_files/figure-html/cell-10-output-1.svg){}\n:::\n:::\n\n\n\n### Arbitrary excitation\n\n#### API\n\n**Data type**\n\n::: {.api}\n**ForcedModalTimeProblem**\n\n---\n\n::: {#20 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>ForcedModalTimeProblem&#40;K, M, ξn, u0, t, F, n &#61; size&#40;K, 1&#41;; ismodal &#61; false&#41;</code></pre>\n<p>Structure containing data for modal time solver for computing the forced response due to an arbitrary excitation</p>\n<p><strong>Fields</strong></p>\n<ul>\n<li><p><code>K::VecOrMat&#123;Real&#125;</code>:</p>\n<ul>\n<li><p>If <code>ismodal &#61; false</code> then <code>Matrix&#123;Real&#125;</code>: Stiffness matrix</p>\n</li>\n<li><p>If <code>ismodal &#61; true</code> then <code>Vector&#123;Real&#125;</code>: Natural angular frequencies</p>\n</li>\n</ul>\n</li>\n<li><p><code>M::AbtractMatrix</code>:</p>\n<ul>\n<li><p>If <code>ismodal &#61; false</code>: Mass matrix</p>\n</li>\n<li><p>If <code>ismodal &#61; true</code>: Mass-normalized mode shapes</p>\n</li>\n</ul>\n</li>\n<li><p><code>ξn</code>: Damping ratios</p>\n</li>\n<li><p><code>F::Matrix&#123;Real&#125;</code>: External force matrix &#40;or modal participation factors&#41;</p>\n</li>\n<li><p><code>u0::Tuple</code>: Initial conditions</p>\n<ul>\n<li><p><code>u0&#91;1&#93;</code>: Initial displacement &#40;or modal displacement&#41;</p>\n</li>\n<li><p><code>u0&#91;2&#93;</code>: Initial velocity &#40;or modal velocity&#41;</p>\n</li>\n</ul>\n</li>\n<li><p><code>t::AbstractRange</code>: Time points at which to evaluate the response</p>\n</li>\n<li><p><code>n::Int</code>: Number of modes to retain in the modal basis</p>\n</li>\n<li><p><code>ismodal::Bool</code>: Flag to indicate if the problem contains modal data</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n**Related function**\n\n::: {.api}\n**solve**\n\n\n\n---\n\n::: {#22 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>solve&#40;prob::ForcedModalTimeProblem&#41;</code></pre>\n<p>Compute the forced response of a multi-degrees of freedom &#40;Mdof&#41; system due to an arbitrary excitation using the modal approach.</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>prob</code>: Structure containing the parameters of the Mdof problem</p>\n</li>\n<li><p><code>method</code>: Method to compute the Duhamel&#39;s integral</p>\n<ul>\n<li><p><code>:filt</code>: Filtering using the Z-transform of the impulse response &#40;default&#41;</p>\n</li>\n<li><p><code>:interp</code>: Interpolation &#43; Gaussian quadrature</p>\n</li>\n<li><p><code>:conv</code>: Convolution</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>sol</code>: ModalTimeSolution structure containing the response of the system at the given time points</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n:::\n\n#### Example\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\n# System parameters\nM = Diagonal([2., 1.])\nK = [6. -2.; -2. 4.]\nξ = 0.05\n\n# Time vector\nt = 0.:1e-2:30.\n\n# Initial conditions\nu0 = (zeros(2), zeros(2))\n\n# Excitation parameters\nF0 = 10.\ntstart = 2.\nduration = 5.\nhaversine = HaverSine(F0, tstart, duration)\nF0 = excitation(haversine, t)\nF = zeros(2, length(t))\nF[1, :] .= F0\n\n# Problem definition - case 1 - Provide the stiffness and mass matrices\nprob_forced = ForcedModalTimeProblem(K, M, ξ, F, u0, t)\n\n# Problem definition - case 2 - Provide the squared natural frequencies and mode shapes\nωm, Φm = eigenmode(K, M)\nu0m = (zeros(2), zeros(2))\nLm = Φm'*F\nprob_forced_modal = ForcedModalTimeProblem(ωm, Φm, ξ, Lm, u0m, t, ismodal = true)\n\n# Solution\nx_forced = solve(prob_forced).u\nx_forced_modal = solve(prob_forced_modal).u\n```\n:::\n\n\n\n::: {#26 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![](modal_time_solvers_files/figure-html/cell-14-output-1.svg){}\n:::\n:::\n\n\n\n## Additional function - Impulse response matrix\n\nThe impulse response matrix of an Mdof system is obtained from the modal impulse response matrix. The modal impulse response matrix is given by:\n$$\n\\mathbf{h}(t) = \\Phi \\begin{bmatrix}\nh_1(t) & & & & \\\\\n& \\ddots & & & \\\\\n& & h_n(t) & & \\\\\n& & & \\ddots & \\\\\n& & & & h_N(t)\n\\end{bmatrix}\n\\Phi^\\mathsf{T},\n$$\nwhere $h_n(t)$ is the modal impulse response of the mode $n$ computed as in [Sdof solvers - Section 1.3](https://maucejo.github.io/StructuralVibration.jl/solvers/#impulse-response).\n\n::: {.api}\n**impulse_response**\n\n---\n\n::: {#28 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div class=\"markdown\"><pre><code>impulse_response&#40;K::Matrix&#123;Float64&#125;, M::Matrix&#123;Float64&#125;, ξn, t, n &#61; size&#40;K, 1&#41;; ismat &#61; false&#41;</code></pre>\n<p>Compute the impulse response of a multi-degrees of freedom &#40;Mdof&#41; system using the modal approach</p>\n<p><strong>Inputs</strong></p>\n<ul>\n<li><p><code>K</code>:</p>\n<ul>\n<li><p>If <code>ismodal &#61; false</code>: Stiffness matrix</p>\n</li>\n<li><p>If <code>ismodal &#61; true</code>: Squared natural angular frequencies</p>\n</li>\n</ul>\n</li>\n<li><p><code>M</code>:</p>\n<ul>\n<li><p>If <code>ismodal &#61; false</code>: Mass matrix</p>\n</li>\n<li><p>If <code>ismodal &#61; true</code>: Mass-normalized mode shapes</p>\n</li>\n</ul>\n</li>\n<li><p><code>ξn</code>: Damping ratios</p>\n</li>\n<li><p><code>t</code>: Time points at which to evaluate the response</p>\n</li>\n<li><p><code>n</code>: Number of modes to retain in the modal basis</p>\n</li>\n<li><p><code>ismodal::Bool</code>: Flag to indicate if the problem contains modal data</p>\n</li>\n<li><p><code>ismat::Bool</code>: Flag to indicate if the output should be a matrix</p>\n</li>\n</ul>\n<p><strong>Output</strong></p>\n<ul>\n<li><p><code>sol</code>: ModalImpulseSolution</p>\n</li>\n</ul>\n\n\n</div>\n```\n:::\n:::\n\n\n\n\n:::\n\n\n\n::: {#30 .cell execution_count=1}\n``` {.julia .cell-code}\n# System parameters\nM = Diagonal([2., 1.])\nK = [6. -2.; -2. 4.]\nξ = 0.05\n\n# Time vector\nt = 0.:1e-2:30.\n\n# Impulse response matrix\nh = impulse_response(K, M, ξ, t, ismat = true);\n```\n:::\n\n\n\n::: {#32 .cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![](modal_time_solvers_files/figure-html/cell-17-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "modal_time_solvers_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}